/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package student.information.system;

import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author maraa
 */
public class AdminUI extends javax.swing.JFrame {

    /**
     * Creates new form AdminUI
     */
    
    public static int subjectId = 0;
    
    public AdminUI() {
        initComponents();
        SetStudentsTable();
        SetAvailableCoursesTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        schoolTitle = new javax.swing.JLabel();
        adminDashboardLabel = new javax.swing.JLabel();
        studentRecordLabel = new javax.swing.JLabel();
        courseRecordLabel1 = new javax.swing.JLabel();
        studentSearchField = new javax.swing.JTextField();
        studentSearchBarLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        studentSearchButton = new javax.swing.JButton();
        subjectSearchButton = new javax.swing.JButton();
        subjectSearchField = new javax.swing.JTextField();
        subjectSearchLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        availableSubjTable = new javax.swing.JTable();
        studentAddButton = new javax.swing.JButton();
        studentEditButton = new javax.swing.JButton();
        studentDeleteButton = new javax.swing.JButton();
        subjectDeleteButton = new javax.swing.JButton();
        subjectAddButton = new javax.swing.JButton();
        subjectEditButton = new javax.swing.JButton();
        studentResetButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        subjectResetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        schoolTitle.setFont(new java.awt.Font("Verdana", 1, 20)); // NOI18N
        schoolTitle.setText("XY Senior High School");

        adminDashboardLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        adminDashboardLabel.setText("Admin Dashboard");

        studentRecordLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        studentRecordLabel.setText("Student Record");

        courseRecordLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        courseRecordLabel1.setText("Course Record");

        studentSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSearchFieldActionPerformed(evt);
            }
        });

        studentSearchBarLabel.setText("Student Search Bar");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Last Name", "First Name", "Grade", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studentTable);

        studentSearchButton.setText("Search");
        studentSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSearchButtonActionPerformed(evt);
            }
        });

        subjectSearchButton.setText("Search");
        subjectSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectSearchButtonActionPerformed(evt);
            }
        });

        subjectSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectSearchFieldActionPerformed(evt);
            }
        });

        subjectSearchLabel.setText("Subject Search Bar");

        availableSubjTable.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        availableSubjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Code", "Course Name", "Teacher", "Schedule", "ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(availableSubjTable);

        studentAddButton.setText("Add");
        studentAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentAddButtonActionPerformed(evt);
            }
        });

        studentEditButton.setText("Edit");
        studentEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentEditButtonActionPerformed(evt);
            }
        });

        studentDeleteButton.setText("Delete");
        studentDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDeleteButtonActionPerformed(evt);
            }
        });

        subjectDeleteButton.setText("Delete");
        subjectDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectDeleteButtonActionPerformed(evt);
            }
        });

        subjectAddButton.setText("Add");
        subjectAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectAddButtonActionPerformed(evt);
            }
        });

        subjectEditButton.setText("Edit");
        subjectEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectEditButtonActionPerformed(evt);
            }
        });

        studentResetButton.setText("Reset");
        studentResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentResetButtonActionPerformed(evt);
            }
        });

        logoutButton.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        subjectResetButton.setText("Reset");
        subjectResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(studentSearchBarLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(studentSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(studentSearchButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(studentResetButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(subjectResetButton)
                                .addGap(18, 18, 18)
                                .addComponent(subjectSearchButton)
                                .addGap(18, 18, 18)
                                .addComponent(subjectSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(studentRecordLabel)
                                .addGap(318, 318, 318)
                                .addComponent(adminDashboardLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(studentAddButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(studentEditButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(studentDeleteButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(subjectAddButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subjectEditButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subjectDeleteButton))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(schoolTitle)
                                .addGap(245, 245, 245)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subjectSearchLabel)
                                    .addComponent(courseRecordLabel1)))
                            .addComponent(logoutButton))))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schoolTitle)
                    .addComponent(logoutButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminDashboardLabel)
                    .addComponent(studentRecordLabel)
                    .addComponent(courseRecordLabel1))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentSearchBarLabel)
                    .addComponent(subjectSearchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(studentSearchButton)
                        .addComponent(studentResetButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(subjectSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(subjectSearchButton)
                        .addComponent(subjectResetButton)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(subjectAddButton)
                        .addComponent(subjectEditButton)
                        .addComponent(subjectDeleteButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentAddButton)
                        .addComponent(studentEditButton)
                        .addComponent(studentDeleteButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studentSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSearchFieldActionPerformed
        // TODO add your handling code here:
        studentSearchField.setToolTipText("You may input a student's first OR last name to search.");
    }//GEN-LAST:event_studentSearchFieldActionPerformed

    private void subjectSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectSearchFieldActionPerformed

    private void studentSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSearchButtonActionPerformed
        // TODO add your handling code here:
        
        String studentSearchInput = studentSearchField.getText();
        
        if (studentSearchInput.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Search field cannot be blank.");
            return;
        }
        
        
        for (int i = 0; i < DataHandler.Students.registeredStudents.size(); i++){
            String studentLastName = DataHandler.Students.registeredStudents.get(i).getLastName();
            String studentFirstName = DataHandler.Students.registeredStudents.get(i).getFirstName();
            
            if (studentSearchInput.equals(studentLastName) || studentSearchInput.equals(studentFirstName)){
                Student students = DataHandler.Students.registeredStudents.get(i);
                DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
                model.setRowCount(0);
                model.addRow(
                        new Object[]{
                            students.getLastName(),
                            students.getFirstName(),
                            students.getGradeLevel(),
                            students.getStudentId()
                        }
                    );
        
                studentTable.setModel(model);
                return;
            }
        }
        JOptionPane.showMessageDialog(rootPane, "No student found or field is empty.");
        return;
    }//GEN-LAST:event_studentSearchButtonActionPerformed

    private void studentResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentResetButtonActionPerformed
        // TODO add your handling code here:
        SetStudentsTable();
    }//GEN-LAST:event_studentResetButtonActionPerformed

    private void studentAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentAddButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new AdminAddStudent().setVisible(true);
    }//GEN-LAST:event_studentAddButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        int selection = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to log out?", "Logout Confirmation", JOptionPane.YES_NO_OPTION);

        if (selection == JOptionPane.YES_OPTION){
            this.setVisible(false);
            new AdminLogin().setVisible(true);
        } else {
            return;
        }

    }//GEN-LAST:event_logoutButtonActionPerformed

    private void studentEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentEditButtonActionPerformed
        // TODO add your handling code here:
        if (studentTable.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            StudentLogin.studentIdLogin = DataHandler.Students.registeredStudents.get((int) model.getValueAt(studentTable.getSelectedRow(), 3)).getStudentId();
            this.setVisible(false);
            new AdminEditStudent().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "There is no selected student to edit.");
            return;
        }
        
        
    }//GEN-LAST:event_studentEditButtonActionPerformed

    private void studentDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDeleteButtonActionPerformed
        // TODO add your handling code here:
        
        if (studentTable.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
            int removeStudentById = DataHandler.Students.registeredStudents.get((int) model.getValueAt(studentTable.getSelectedRow(), 3)).getStudentId();
            DataHandler.Students.registeredStudents.remove(removeStudentById);
            DataHandler.Students.sampleStudent.setStudentId(DataHandler.Students.registeredStudents.indexOf(DataHandler.Students.sampleStudent));
            SetStudentsTable();
        } else {
            JOptionPane.showMessageDialog(rootPane, "There is no selected student to remove.");
            return;
        }
        
        
    }//GEN-LAST:event_studentDeleteButtonActionPerformed

    private void subjectAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectAddButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new AdminAddCourse().setVisible(true);
    }//GEN-LAST:event_subjectAddButtonActionPerformed

    private void subjectEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectEditButtonActionPerformed
        // TODO add your handling code here:
        if (availableSubjTable.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel) availableSubjTable.getModel();
            subjectId = DataHandler.Students.availableSubjects.get((int) model.getValueAt(availableSubjTable.getSelectedRow(), 4)).getSubjectId();
            this.setVisible(false);
            new AdminEditCourse().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "There is no selected course to edit.");
            return;
        }
    }//GEN-LAST:event_subjectEditButtonActionPerformed

    private void subjectDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectDeleteButtonActionPerformed
        // TODO add your handling code here:
        if (availableSubjTable.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) availableSubjTable.getModel();
            int removeCourseById = DataHandler.Students.availableSubjects.get((int) model.getValueAt(availableSubjTable.getSelectedRow(), 4)).getSubjectId();
            DataHandler.Students.availableSubjects.remove(removeCourseById);
            DataHandler.Students.sampleSubject.setSubjectId(DataHandler.Students.availableSubjects.indexOf(DataHandler.Students.sampleSubject));
            SetAvailableCoursesTable();
        } else {
            JOptionPane.showMessageDialog(rootPane, "There is no selected course to remove.");
            return;
        }
    }//GEN-LAST:event_subjectDeleteButtonActionPerformed

    private void subjectSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectSearchButtonActionPerformed
        // TODO add your handling code here:
        String subjectSearchInput = subjectSearchField.getText();
        
        if (subjectSearchInput.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Search field cannot be blank.");
            return;
        }
        
        
        for (int i = 0; i < DataHandler.Students.availableSubjects.size(); i++){
            String subjectCode = DataHandler.Students.availableSubjects.get(i).getSubjectCode();
            String subjectName = DataHandler.Students.availableSubjects.get(i).getName();
            String subjectTeacherName = DataHandler.Students.availableSubjects.get(i).getTeacher();
            
            if (subjectSearchInput.equals(subjectCode) || subjectSearchInput.equals(subjectName) || subjectSearchInput.equals(subjectTeacherName)){
                Subjects subjects = DataHandler.Students.availableSubjects.get(i);
                DefaultTableModel model = (DefaultTableModel) availableSubjTable.getModel();
                model.setRowCount(0);
                model.addRow(
                        new Object[]{
                            subjects.getSubjectCode(),
                            subjects.getName(),
                            subjects.getTeacher(),
                            subjects.getStart() + " - " + subjects.getEnd(),
                            subjects.getSubjectId()
                        }
                    );
        
                availableSubjTable.setModel(model);
                return;
            }
        }
        JOptionPane.showMessageDialog(rootPane, "No course found or field is empty.");
        return;
    }//GEN-LAST:event_subjectSearchButtonActionPerformed

    private void subjectResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectResetButtonActionPerformed
        // TODO add your handling code here:
        SetAvailableCoursesTable();
    }//GEN-LAST:event_subjectResetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminUI().setVisible(true);
            }
        });
    }
    
    public void SetStudentsTable(){
        LinkedList<Student> studentList = DataHandler.Students.registeredStudents;
        DefaultTableModel model = (DefaultTableModel) studentTable.getModel();
        model.setRowCount(0);
        for(Student s: studentList){
            model.addRow(
                new Object[]{
                    s.getLastName(),
                    s.getFirstName(),
                    s.getGradeLevel(),
                    s.getStudentId()
                }
            );
        }
        
        studentTable.setModel(model);
    }
    
    public void SetAvailableCoursesTable(){
        LinkedList<Subjects> subjectsAvailable = DataHandler.Students.availableSubjects;
        DefaultTableModel model = (DefaultTableModel) availableSubjTable.getModel();
        model.setRowCount(0);
        for(Subjects s: subjectsAvailable){
            model.addRow(
                new Object[]{
                    s.getSubjectCode(),
                    s.getName(),
                    s.getTeacher(),
                    s.getStart() + " - " + s.getEnd(),
                    s.getSubjectId()
                }
            );
        }
        
        availableSubjTable.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminDashboardLabel;
    private javax.swing.JTable availableSubjTable;
    private javax.swing.JLabel courseRecordLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logoutButton;
    private javax.swing.JLabel schoolTitle;
    private javax.swing.JButton studentAddButton;
    private javax.swing.JButton studentDeleteButton;
    private javax.swing.JButton studentEditButton;
    private javax.swing.JLabel studentRecordLabel;
    private javax.swing.JButton studentResetButton;
    private javax.swing.JLabel studentSearchBarLabel;
    private javax.swing.JButton studentSearchButton;
    private javax.swing.JTextField studentSearchField;
    private javax.swing.JTable studentTable;
    private javax.swing.JButton subjectAddButton;
    private javax.swing.JButton subjectDeleteButton;
    private javax.swing.JButton subjectEditButton;
    private javax.swing.JButton subjectResetButton;
    private javax.swing.JButton subjectSearchButton;
    private javax.swing.JTextField subjectSearchField;
    private javax.swing.JLabel subjectSearchLabel;
    // End of variables declaration//GEN-END:variables
}
